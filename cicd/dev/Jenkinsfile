pipeline {
    agent any

    environment {
        APP_NAME = 'dms-client'
        
        BUILD_TARGET = 'dev'
        BUILD_VERSION = "1.0.${env.BUILD_ID}-${env.BUILD_TARGET}"

        DEPLOY_CREDENTIALS_ID = 'github-user'
        DEPLOY_REPO_URL = 'github.com/dnjsakf/argocd-apps.git'
        DEPLOY_PATH = "${env.APP_NAME}/${env.APP_NAME}-deployment.yaml"

        DOCKER_CREDENTIALS_ID = 'docker-user'
        DOCKER_IMAGE_NAME = "dnjsakf/${env.APP_NAME}"
        DOCKER_IMAGE_TAG = "${env.DOCKER_IMAGE_NAME}:${env.BUILD_VERSION}"
        DOCKER_IMAGE_TAG_LATEST = "${env.DOCKER_IMAGE_NAME}:latest"

        ARGOCD_SERVER = 'https://host.docker.internal:38080'
        ARGOCD_AUTH_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcmdvY2QiLCJzdWIiOiJhcGl1c2VyOmFwaUtleSIsIm5iZiI6MTcyODAyMDM1OCwiaWF0IjoxNzI4MDIwMzU4LCJqdGkiOiI1NjIzODM5Yy0yY2VmLTQzMzktYjc5NS02OGM5OTJiOTJhNjcifQ.XLd48Zyd1bU14SpFDnGZrJlf5t4ua3rqKHBHJAo6n3k'
    }

    stages {

        stage('Build to Jar') {
            agent {
                docker {
                    image 'node:20.5.0-alpine'
                }
            }
            steps {
                sh 'npm install'
                sh 'npm run build '
                sh "cd dist; tar -cvf ../build.tar *; cd .."
            
                // 특정 파일 두 개를 stash에 저장
                stash includes: """
                    build.tar,
                    cicd/${env.BUILD_TARGET}/server.conf
                """, name: 'build-output'
            }
        }

        stage('Docker Image Build & Push') {
            steps {
                unstash 'build-output'

                sh "ls -al"
                sh "cp cicd/${env.BUILD_TARGET}/server.conf ."

                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${env.DOCKER_CREDENTIALS_ID}") {
                        def buildImage = docker.build("${env.DOCKER_IMAGE_TAG}", "-f ./cicd/${env.BUILD_TARGET}/Dockerfile .")
                        buildImage.push()

                        sh "docker tag ${env.DOCKER_IMAGE_TAG} ${env.DOCKER_IMAGE_TAG_LATEST}"
                        sh "docker push ${env.DOCKER_IMAGE_TAG_LATEST}"
                    }
                }
            }
        }

        stage('Checkout Deploy Repo') {
            steps {
                git credentialsId: "${env.DEPLOY_CREDENTIALS_ID}",
                    branch: 'main',
                    url: "https://${env.DEPLOY_REPO_URL}"
            }
        }

        stage('Update Deployment YAML') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${env.DEPLOY_CREDENTIALS_ID}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh """
                    sed -i 's|image:.*|image: ${env.DOCKER_IMAGE_TAG}|' ${env.DEPLOY_PATH}
                    git config user.email "${GIT_USERNAME}@example.com"
                    git config user.name "${GIT_USERNAME}"
                    git add ${env.DEPLOY_PATH}
                    git commit -m "Update image to ${env.DOCKER_IMAGE_TAG}"
                    git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${env.DEPLOY_REPO_URL}
                    """
                }
            }
        }

        // stage('Trigger ArgoCD Sync') {
        stage('Running container') {
            steps {
                script {
                    sh """
                    if [ \$(docker ps -q -f name=\"${env.APP_NAME}\") ]; then
                        docker stop ${env.APP_NAME}
                        docker rm ${env.APP_NAME}
                    fi
                    """

                    def container = docker.image("${env.DOCKER_IMAGE_TAG_LATEST}")
                    container.run("-d -p 3000:80 --name ${env.APP_NAME}")
                }
            }
        }
    }

    post {
        always {
            cleanWs()

            script {
                sh """
                if [ \$(if docker images -q -f reference=${env.DOCKER_IMAGE_NAME}) ]; then
                    echo "Docker Image Clean...  ${env.DOCKER_IMAGE_TAG}"
                    docker rmi ${env.DOCKER_IMAGE_NAME}
                fi
                """
            }
        }
        success {
            echo 'This will run only if all stages succeed'
        }
        failure {
            echo 'This will run only if any stage fails'
        }
    }
}
